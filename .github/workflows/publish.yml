name: Publish Package to npmjs

on:
  release:
    types: [created]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (e.g., 1.0.0)'
        required: true

jobs:
  validate-release-version:
    # Only run this job if manually triggered
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Validate input release version
      - name: Check input release version
        run: |
          if [ -z "${{ github.event.inputs.release-version }}" ]; then
            echo "Missing input 'release-version'."
            exit 1
          fi
      - name: Validate release version
        run: |
          if [[ ! ${{ github.event.inputs.release_version }} =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid release version format. Please use MAJOR.MINOR.PATCH format (e.g., 1.0.0)"
            exit 1
          fi
      - name: Check if release version not exists
        run: |
          version=${{ github.event.inputs.release_version }}
          if curl -s -o /dev/null -w "%{http_code}" -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/${{ github.repository }}/releases/tags/$version | grep -q '404'; then
            echo "Release version $version does not exist."
            exit 1
          fi

  release-info-extraction:
    needs: validate-release-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Get release information using GitHub API
      - name: Extract release information
        id: release_info
        run: |
          final_tag_name=if [ -z "${{ github.event_name == 'workflow_dispatch' }}" ]; then echo "${{ github.event.inputs.release_version }}"; else echo "${{ github.event.release.tag_name }}"; fi
          release_id=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                        -H "Accept: application/vnd.github.v3+json" \
                        https://api.github.com/repos/${{ github.repository }}/releases/tags/${final_tag_name} | jq -r '.id')
          release_tag=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                        -H "Accept: application/vnd.github.v3+json" \
                        https://api.github.com/repos/${{ github.repository }}/releases/${release_id} | jq -r '.tag_name')
          release_notes=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                          -H "Accept: application/vnd.github.v3+json" \
                          https://api.github.com/repos/${{ github.repository }}/releases/${release_id} | jq -r '.body')

          echo "::set-output name=tag::$release_tag"
          echo "::set-output name=notes::$release_notes"

  pre-release:
    needs: release-info-extraction
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Append release notes to CHANGELOG.md if not exists changes log
        run: |
          if [ ! -f "CHANGELOG.md" ]; then
            echo "# Changelog" >> CHANGELOG.md
          fi
          echo "" >> CHANGELOG.md
          echo "## Release ${{ needs.release-info-extraction.outputs.tag }}" >> CHANGELOG.md
          echo "${{ needs.release-info-extraction.outputs.notes }}" >> CHANGELOG.md

      - name: Create the release branch if not exists
        run: |
          git fetch --prune --unshallow
          git checkout -b release/${{ needs.release-info-extraction.outputs.tag }} || true
          git commit -am "Add release notes for ${{ needs.release-info-extraction.outputs.tag }}"
          git push origin release/${{ needs.release-info-extraction.outputs.tag }}

      - name: Create the pull request and merge release branch to master
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Add release notes for ${{ needs.release-info-extraction.outputs.tag }}"
          title: "Release ${{ needs.release-info-extraction.outputs.tag }}"
          body: "Release ${{ needs.release-info-extraction.outputs.tag }}"
          branch: release/${{ needs.release-info-extraction.outputs.tag }}
          base: master
          assignees: {{ github.actor }}

  publish:
    needs: pre-release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          fetch-depth: 3
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: "refs/tags/${{ needs.release-info-extraction.outputs.tag }}"

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: 'https://registry.npmjs.org'
          scope: "@${{ github.repository_owner }}"

      - name: Install dependencies
        run: CI=true yarn install

      - name: Publish to npm registry
        run: yarn publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_PROVENANCE: true

      - name: "Extract Git info"
        run: |
          echo "GITHUB_AUTHOR=$(git log -1 --pretty=format:'%an <%ae>' | xargs)" >> $GITHUB_ENV
          echo "GITHUB_REVISION=$(git rev-parse HEAD)" >> $GITHUB_ENV
          echo "GITHUB_REPO=$(git config --get remote.origin.url)" >> $GITHUB_ENV

          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          GITHUB_COMMITS=$(git --no-pager log --pretty=format:'%h (%an) %s' -n3 --no-color |  while read line || [ -n "$line" ]; do echo -n "- $line \\n"; done)
          echo "GITHUB_COMMITS<<$EOF" >> "$GITHUB_ENV"
          echo $GITHUB_COMMITS | sed "s/\"/'/g" >> "$GITHUB_ENV"
          echo "$EOF" >> "$GITHUB_ENV"

      - name: Slack Notification
        id: slack
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "channel": "${{ vars.SLACK_CHANNEL }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":rocket: *${{ github.event.repository.name }} - Published package to npmjs*"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Last Changes by:* ${{ env.GITHUB_AUTHOR }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "```${{ env.GITHUB_COMMITS }}```"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Release Notes:* ${{ needs.release-info-extraction.outputs.notes }}"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Release"
                      },
                      "style": "primary",
                      "url": "${{ env.GITHUB_REPO }}/releases/tag/${{ needs.release-info-extraction.outputs.tag }}"
                    },
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View package"
                      },
                      "style": "primary",
                      "url": "https://www.npmjs.com/package/@${{ github.repository_owner }}/{{ github.repository_owner }}/v/${{ needs.release-info-extraction.outputs.tag }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
